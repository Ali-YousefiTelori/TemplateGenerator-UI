@page "/AddOrUpdateForm"
@using EasyMicroservices.UI.BlazorComponents
@using EasyMicroservices.UI.Cores
@using EasyMicroservices.UI.TemplateGenerator.Blazor.Pages.FormItems
@using EasyMicroservices.UI.TemplateGenerator.ViewModels.Forms;
@using MudBlazor
@using global::TemplateGenerators.GeneratedServices;
@inject AddOrUpdateFormViewModel viewModel;
@inject ISnackbar Snackbar

<MudRTLProvider RightToLeft="BaseViewModel.IsRightToLeft">
    <MudStack>
        <MudPaper Class="pa-4">
            <MudStack Spacing="4">
                <MudTextField @bind-Value="viewModel.Name" Label="@viewModel.GetLanguage("Name")" Variant="Variant.Text"></MudTextField>
            </MudStack>
        </MudPaper>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Disabled="viewModel.IsBusy" OnClick="(arg) => viewModel.SaveCommand.Execute(null)">
            @if (viewModel.IsBusy)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">@viewModel.GetLanguage("Saving")</MudText>
            }
            else
            {
                <MudText>@viewModel.GetLanguage("Save")</MudText>
            }
        </MudButton>
        <MudDataGrid T="FormItemContract" Items="viewModel.FormItems">
            <ToolBarContent>
                <MudStack AlignItems="AlignItems.Center" Row="true" Spacing="5">
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="(arg) => ShowAddFormItemDialog()" />
                    @viewModel.GetLanguage("FormItems")
                </MudStack>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Index" Title="@viewModel.GetLanguage("Index")" />
                <PropertyColumn Property="x => x.Title" Title="@viewModel.GetLanguage("Title")" />
                <PropertyColumn Property="x => x.Type" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="(arg) => ShowUpdateFormItemDialog(context.Item)" />
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="(arg) => ShowDeleteDialog(context.Item)" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudStack>
    <BaseDialog @ref="deleteDialog">
        <TitleContent>
            <MudText>
                @viewModel.GetLanguage("DeleteFormItem_Title")
            </MudText>
        </TitleContent>
        <DialogContent>
            @viewModel.GetLanguage("DeleteQuestion_Content")
        </DialogContent>
        <DialogActions>
            @if (!viewModel.IsBusy)
            {
                <MudButton OnClick="() => deleteDialog.CloseDialog()">@viewModel.GetLanguage("Cancel")</MudButton>
            }
            <MudButton Color="Color.Error" Variant="Variant.Filled" Disabled="viewModel.IsBusy" OnClick="()=>DoDelete()">
                @if (viewModel.IsBusy)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@viewModel.GetLanguage("Deleting")</MudText>
                }
                else
                {
                    <MudText>@viewModel.GetLanguage("Delete")</MudText>
                }
            </MudButton>
        </DialogActions>
    </BaseDialog>
    <BaseDialog @ref="addDialog">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> Add
            </MudText>
        </TitleContent>
        <DialogContent>
            <AddOrUpdateFormItem @ref="addOrUpdateFormItemView" />
        </DialogContent>
    </BaseDialog>
</MudRTLProvider>
@code {
    public AddOrUpdateFormViewModel ViewModel
    {
        get
        {
            return viewModel;
        }
    }
    AddOrUpdateFormItem addOrUpdateFormItemView;

    BaseDialog addDialog;
    BaseDialog deleteDialog;
    protected override Task OnInitializedAsync()
    {
        _ = viewModel.LoadConfig();
        viewModel.BindPropertyChanged(StateHasChanged);
        return base.OnInitializedAsync();
    }

    void ShowAddFormItemDialog()
    {
        addDialog.ShowDialog(() =>
        {
            addOrUpdateFormItemView.ViewModel.Clear();
            addOrUpdateFormItemView.ViewModel.OnSuccess = (item) =>
            {
                ViewModel.FormItems.Add(item);
                addDialog.CloseDialog();
                Snackbar.Add("ثبت با موفقیت انجام شد.", Severity.Success);
                StateHasChanged();
            };
        });
    }

    void ShowUpdateFormItemDialog(FormItemContract formItemContract)
    {
        addDialog.ShowDialog(() =>
        {
            addOrUpdateFormItemView.ViewModel.Clear();
            addOrUpdateFormItemView.ViewModel.UpdateFormItemContract = formItemContract;
            addOrUpdateFormItemView.ViewModel.OnSuccess = (item) =>
            {
                viewModel.FormItems.Remove(formItemContract);
                viewModel.FormItems.Insert(0, item);
                addDialog.CloseDialog();
                Snackbar.Add("ویرایش با موفقیت انجام شد.", Severity.Success);
                StateHasChanged();
            };
        });
    }

    void ShowDeleteDialog(FormItemContract formItemContract)
    {
        viewModel.SelectFormItemContract = formItemContract;
        deleteDialog.ShowDialog();
    }

    void DoDelete()
    {
        viewModel.OnDelete = (o) =>
        {
            deleteDialog.CloseDialog();
            StateHasChanged();
            Snackbar.Add(viewModel.GetLanguage("DeleteForm_Message"), Severity.Success);
        };
        viewModel.DeleteCommand.Execute(viewModel.SelectFormItemContract);
    }
}
